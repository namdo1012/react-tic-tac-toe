{"version":3,"sources":["Square.js","Board.js","calculateWinner.js","Game.js","serviceWorker.js","index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","i","squares","renderSquare","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","step","setState","slice","currSquares","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32091b06.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component {\n\n\trender(){\n\t\treturn (\n\t\t\t<button \n\t\t\t\tclassName=\"square\"\n\t\t\t\tonClick={this.props.onClick}\n\t\t\t>\n\t\t\t\t{this.props.value}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nclass Board extends React.Component {\n\t\n\trenderSquare(i) {\n\t\treturn (\n\t\t\t<Square \n\t\t\t\tvalue={this.props.squares[i]}\n\t\t\t\tonClick={() => this.props.onClick(i)}\n\t\t\t/>\n\t\t)\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;","import React from 'react';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default calculateWinner;","import React from 'react';\nimport Board from './Board';\nimport calculateWinner from './calculateWinner';\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thistory: [{\n\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t}],\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true,\n\t\t}\n\t}\n\n\tjumpTo(step){\n\t\tthis.setState({\n\t\t\tstepNumber: step,\n\t\t\txIsNext: (step%2) === 0,\n\t\t});\n\t}\n\n\thandleClick(i) {\n  \t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\n  \t\tconst current = history[history.length - 1];\n  \t\tconst currSquares = current.squares.slice();\n\n\t\tif (calculateWinner(currSquares) || currSquares[i]){\n\t\t\treturn;\n\t\t}\n\n  \t\tcurrSquares[i] = this.state.xIsNext ? 'X' : 'O';\n  \t\tthis.setState({\n  \t\t\thistory: history.concat([{\n  \t\t\t\tsquares: currSquares,\n  \t\t\t}]),\n  \t\t\tstepNumber: history.length,\n  \t\t\txIsNext: !this.state.xIsNext,\n  \t\t});\n\t}\n\n  \trender (){\n  \t\tconst history = this.state.history;\n  \t\tconst current = history[this.state.stepNumber];\n\t\tconst winner = calculateWinner(current.squares);\n\t\tlet status;\n    \tif (winner) {\n      \t\tstatus = 'Winner: ' + winner;\n    \t} else {\n      \t\tstatus = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    \t}\n\n    \tconst moves = history.map((step, move) => {\n    \t\tconst desc = move === 0 ?\n    \t\t\t\t`Go to game start` :\n    \t\t\t\t`Go to move #${move}`;\n    \t\treturn (\n    \t\t\t<li key={move}>\n    \t\t\t\t<button onClick={() => this.jumpTo(move)}>{desc}</button>\n    \t\t\t</li>\n    \t\t);\n    \t})\n\n    \treturn (\n\t      \t<div className=\"game\">\n\t        \t<div className=\"game-board\">\n\t          \t\t<Board \n\t          \t\t\tsquares={current.squares}\n\t          \t\t\tonClick={(i) => this.handleClick(i)}\n\t          \t\t/>\n\t        \t</div>\n\t\t      \t<div className=\"game-info\">\n\t\t      \t\t<div>{status}</div>\n\t\t      \t\t<ol>{moves}</ol>\n\t\t      \t</div>\n\t      \t</div>\n\n\t    );   \n\t}\n}\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}